import { type ClassValue, clsx } from "clsx"

export function cn(...inputs: ClassValue[]) {
  return clsx(inputs)
}

export function formatNumber(num: number, locale: string = 'en'): string {
  if (locale === 'bn') {
    const bengaliDigits = ['‡ß¶', '‡ßß', '‡ß®', '‡ß©', '‡ß™', '‡ß´', '‡ß¨', '‡ß≠', '‡ßÆ', '‡ßØ'];
    return num.toString().replace(/\d/g, (digit) => bengaliDigits[parseInt(digit)]);
  }
  return num.toLocaleString();
}

export function formatDate(date: Date, locale: string = 'en'): string {
  if (locale === 'bn') {
    const months = ['‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø', '‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø', '‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö', '‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤', '‡¶Æ‡ßá', '‡¶ú‡ßÅ‡¶®', '‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á', '‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü', '‡¶∏‡ßá‡¶™‡ßç‡¶ü‡ßá‡¶Æ‡ßç‡¶¨‡¶∞', '‡¶Ö‡¶ï‡ßç‡¶ü‡ßã‡¶¨‡¶∞', '‡¶®‡¶≠‡ßá‡¶Æ‡ßç‡¶¨‡¶∞', '‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞'];
    return `${formatNumber(date.getDate(), locale)} ${months[date.getMonth()]} ${formatNumber(date.getFullYear(), locale)}`;
  }
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
}

export function calculateAge(birthDate: Date, targetDate?: Date): {
  years: number;
  months: number;
  days: number;
  totalDays: number;
  totalWeeks: number;
  totalMonths: number;
  totalHours: number;
  totalMinutes: number;
  totalSeconds: number;
  daysUntilBirthday: number;
  nextBirthday: Date;
  leapYears: number;
  secondsLived: number;
  minutesLived: number;
  hoursLived: number;
  heartbeats: number;
  breaths: number;
} {
  const today = targetDate || new Date();
  const birth = new Date(birthDate);
  
  let years = today.getFullYear() - birth.getFullYear();
  let months = today.getMonth() - birth.getMonth();
  let days = today.getDate() - birth.getDate();

  if (days < 0) {
    months--;
    const lastMonth = new Date(today.getFullYear(), today.getMonth(), 0);
    days += lastMonth.getDate();
  }

  if (months < 0) {
    years--;
    months += 12;
  }

  // Calculate additional information
  const totalDays = Math.floor((today.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24));
  const totalWeeks = Math.floor(totalDays / 7);
  const totalMonths = years * 12 + months;

  // Next birthday
  const nextBirthday = new Date(today.getFullYear(), birth.getMonth(), birth.getDate());
  if (nextBirthday < today) {
    nextBirthday.setFullYear(today.getFullYear() + 1);
  }
  const daysUntilBirthday = Math.ceil((nextBirthday.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));

  // Fun facts
  const totalSeconds = Math.floor((today.getTime() - birth.getTime()) / 1000);
  const totalMinutes = Math.floor(totalSeconds / 60);
  const totalHours = Math.floor(totalMinutes / 60);
  const heartbeats = Math.floor(totalSeconds * 1.2); // Average 72 bpm
  const breaths = Math.floor(totalSeconds / 4); // Average 15 breaths per minute

  // Calculate leap years
  let leapYears = 0;
  for (let year = birth.getFullYear(); year <= today.getFullYear(); year++) {
    if ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) {
      leapYears++;
    }
  }

  return {
    years,
    months,
    days,
    totalDays,
    totalWeeks,
    totalMonths,
    totalHours,
    totalMinutes,
    totalSeconds,
    daysUntilBirthday,
    nextBirthday,
    leapYears,
    secondsLived: totalSeconds,
    minutesLived: totalMinutes,
    hoursLived: totalHours,
    heartbeats,
    breaths,
  };
}

export function convertToHijri(gregorianDate: Date, locale: string = 'en') {
  const year = gregorianDate.getFullYear();
  const month = gregorianDate.getMonth() + 1;
  const day = gregorianDate.getDate();
  
  // Islamic calendar epoch: July 16, 622 CE (Gregorian)
  const islamicEpoch = new Date(622, 6, 16); // Month is 0-indexed
  const targetDate = new Date(year, month - 1, day);
  
  // Calculate days since Islamic epoch
  const daysSinceEpoch = Math.floor((targetDate.getTime() - islamicEpoch.getTime()) / (1000 * 60 * 60 * 24));
  
  // Islamic year is approximately 354.37 days
  const hijriYear = Math.floor(daysSinceEpoch / 354.37) + 1;
  
  // Calculate remaining days for month calculation
  const daysInHijriYear = Math.floor((daysSinceEpoch % 354.37));
  
  // Islamic months have alternating 29/30 days (simplified)
  const hijriMonthDays = [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29];
  let hijriMonth = 1;
  let remainingDays = daysInHijriYear;
  
  for (let i = 0; i < 12; i++) {
    if (remainingDays <= hijriMonthDays[i]) {
      hijriMonth = i + 1;
      break;
    }
    remainingDays -= hijriMonthDays[i];
  }
  
  const hijriDay = Math.max(1, Math.floor(remainingDays) + 1);
  
  const hijriMonths = {
    bn: [
      '‡¶Æ‡ßÅ‡¶π‡¶æ‡¶∞‡¶∞‡¶Æ', '‡¶∏‡¶´‡¶∞', '‡¶∞‡¶¨‡¶ø‡¶â‡¶≤ ‡¶Ü‡¶â‡¶Ø‡¶º‡¶æ‡¶≤', '‡¶∞‡¶¨‡¶ø‡¶â‡¶∏ ‡¶∏‡¶æ‡¶®‡¶ø', '‡¶ú‡ßÅ‡¶Æ‡¶æ‡¶¶‡¶æ‡¶≤ ‡¶â‡¶≤‡¶æ', '‡¶ú‡ßÅ‡¶Æ‡¶æ‡¶¶‡¶æ‡¶∏ ‡¶∏‡¶æ‡¶®‡¶ø',
      '‡¶∞‡¶ú‡¶¨', '‡¶∂‡¶æ‡¶¨‡¶æ‡¶®', '‡¶∞‡¶Æ‡¶ú‡¶æ‡¶®', '‡¶∂‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶≤', '‡¶ú‡¶ø‡¶≤‡¶ï‡¶¶', '‡¶ú‡¶ø‡¶≤‡¶π‡¶ú'
    ],
    en: [
      'Muharram', 'Safar', 'Rabi\' al-awwal', 'Rabi\' al-thani', 'Jumada al-awwal', 'Jumada al-thani',
      'Rajab', 'Sha\'ban', 'Ramadan', 'Shawwal', 'Dhu al-Qi\'dah', 'Dhu al-Hijjah'
    ]
  };
  
  return {
    year: hijriYear,
    month: hijriMonths[locale as keyof typeof hijriMonths][hijriMonth - 1] || hijriMonths[locale as keyof typeof hijriMonths][0],
    day: hijriDay
  };
}

export function convertToBengali(gregorianDate: Date, locale: string = 'en') {
  const year = gregorianDate.getFullYear();
  const month = gregorianDate.getMonth() + 1;
  const day = gregorianDate.getDate();
  
  // Bengali calendar epoch: April 14, 594 CE (Gregorian)
  const bengaliEpoch = new Date(594, 3, 14); // Month is 0-indexed
  const targetDate = new Date(year, month - 1, day);
  
  // Calculate days since Bengali epoch
  const daysSinceEpoch = Math.floor((targetDate.getTime() - bengaliEpoch.getTime()) / (1000 * 60 * 60 * 24));
  
  // Bengali year is approximately 365.25 days (same as Gregorian)
  const bengaliYear = Math.floor(daysSinceEpoch / 365.25) + 1;
  
  // Calculate remaining days for month calculation
  const daysInBengaliYear = Math.floor((daysSinceEpoch % 365.25));
  
  // Bengali months with their approximate start dates (simplified)
  // Boishakh starts around April 14-15
  const bengaliMonthStarts = [
    0,    // Boishakh (April 14)
    31,   // Joishtho (May 15)
    61,   // Asharh (June 15)
    92,   // Srabon (July 16)
    123,  // Bhadro (August 16)
    154,  // Ashwin (September 16)
    184,  // Kartik (October 16)
    215,  // Agrahayan (November 16)
    245,  // Poush (December 16)
    276,  // Magh (January 15)
    307,  // Falgun (February 14)
    335   // Chaitra (March 15)
  ];
  
  let bengaliMonth = 1;
  let bengaliDay = 1;
  
  // Find the correct month
  for (let i = 0; i < 12; i++) {
    if (daysInBengaliYear >= bengaliMonthStarts[i] && 
        (i === 11 || daysInBengaliYear < bengaliMonthStarts[i + 1])) {
      bengaliMonth = i + 1;
      bengaliDay = daysInBengaliYear - bengaliMonthStarts[i] + 1;
      break;
    }
  }
  
  // Handle leap year adjustments
  if (bengaliMonth === 12 && bengaliDay > 30) {
    bengaliMonth = 1;
    bengaliDay = bengaliDay - 30;
  }
  
  const bengaliMonths = {
    bn: [
      '‡¶¨‡ßà‡¶∂‡¶æ‡¶ñ', '‡¶ú‡ßç‡¶Ø‡ßà‡¶∑‡ßç‡¶†', '‡¶Ü‡¶∑‡¶æ‡¶¢‡¶º', '‡¶∂‡ßç‡¶∞‡¶æ‡¶¨‡¶£', '‡¶≠‡¶æ‡¶¶‡ßç‡¶∞', '‡¶Ü‡¶∂‡ßç‡¶¨‡¶ø‡¶®',
      '‡¶ï‡¶æ‡¶∞‡ßç‡¶§‡¶ø‡¶ï', '‡¶Ö‡¶ó‡ßç‡¶∞‡¶π‡¶æ‡¶Ø‡¶º‡¶£', '‡¶™‡ßå‡¶∑', '‡¶Æ‡¶æ‡¶ò', '‡¶´‡¶æ‡¶≤‡ßç‡¶ó‡ßÅ‡¶®', '‡¶ö‡ßà‡¶§‡ßç‡¶∞'
    ],
    en: [
      'Boishakh', 'Joishtho', 'Asharh', 'Srabon', 'Bhadro', 'Ashwin',
      'Kartik', 'Agrahayan', 'Poush', 'Magh', 'Falgun', 'Chaitra'
    ]
  };
  
  return {
    year: bengaliYear,
    month: bengaliMonths[locale as keyof typeof bengaliMonths][bengaliMonth - 1] || bengaliMonths[locale as keyof typeof bengaliMonths][0],
    day: Math.max(1, Math.min(bengaliDay, 31))
  };
}

export function getZodiacSign(birthDate: Date, locale: string = 'en') {
  const zodiacData = {
    en: {
      signs: ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius'],
      descriptions: [
        {
          name: 'Capricorn',
          personality: 'Capricorn is ambitious, disciplined, and practical. This sign represents natural leadership with strong determination.',
          traits: 'Hardworking, responsible, patient, and goal-oriented.',
          element: 'Earth',
          symbol: 'üêê'
        },
        {
          name: 'Aquarius',
          personality: 'Aquarius is independent, innovative, and humanitarian. This sign thinks outside the box and cares deeply about humanity.',
          traits: 'Original, progressive, friendly, and humanitarian.',
          element: 'Air',
          symbol: '‚ôí'
        },
        {
          name: 'Pisces',
          personality: 'Pisces is compassionate, intuitive, and artistic. This sign has a deep connection to emotions and creativity.',
          traits: 'Empathetic, imaginative, gentle, and spiritual.',
          element: 'Water',
          symbol: 'üêü'
        },
        {
          name: 'Aries',
          personality: 'Aries is bold, energetic, and pioneering. This sign represents natural born leadership with lots of enthusiasm.',
          traits: 'Courageous, confident, passionate, and independent.',
          element: 'Fire',
          symbol: '‚ôà'
        },
        {
          name: 'Taurus',
          personality: 'Taurus is reliable, patient, and practical. This sign values stability and enjoys life\'s pleasures.',
          traits: 'Determined, loyal, sensual, and grounded.',
          element: 'Earth',
          symbol: 'üêÇ'
        },
        {
          name: 'Gemini',
          personality: 'Gemini is curious, adaptable, and communicative. This sign loves learning and connecting with others.',
          traits: 'Versatile, expressive, quick-witted, and sociable.',
          element: 'Air',
          symbol: '‚ôä'
        },
        {
          name: 'Cancer',
          personality: 'Cancer is nurturing, intuitive, and protective. This sign has strong emotional intelligence and cares deeply.',
          traits: 'Loyal, empathetic, imaginative, and protective.',
          element: 'Water',
          symbol: '‚ôã'
        },
        {
          name: 'Leo',
          personality: 'Leo is confident, creative, and generous. This sign has a natural flair for drama and leadership.',
          traits: 'Dramatic, creative, self-confident, and generous.',
          element: 'Fire',
          symbol: '‚ôå'
        },
        {
          name: 'Virgo',
          personality: 'Virgo is analytical, practical, and detail-oriented. This sign has a keen eye for perfection and service.',
          traits: 'Loyal, analytical, kind, and hardworking.',
          element: 'Earth',
          symbol: '‚ôç'
        },
        {
          name: 'Libra',
          personality: 'Libra is diplomatic, fair-minded, and social. This sign seeks balance and harmony in all relationships.',
          traits: 'Cooperative, diplomatic, gracious, and fair-minded.',
          element: 'Air',
          symbol: '‚ôé'
        },
        {
          name: 'Scorpio',
          personality: 'Scorpio is passionate, resourceful, and brave. This sign has intense emotions and strong intuition.',
          traits: 'Resourceful, brave, passionate, and stubborn.',
          element: 'Water',
          symbol: '‚ôè'
        },
        {
          name: 'Sagittarius',
          personality: 'Sagittarius is adventurous, independent, and philosophical. This sign loves freedom and exploring new horizons.',
          traits: 'Generous, idealistic, great sense of humor, and philosophical.',
          element: 'Fire',
          symbol: '‚ôê'
        }
      ]
    },
    bn: {
      signs: ['‡¶Æ‡¶ï‡¶∞', '‡¶ï‡ßÅ‡¶Æ‡ßç‡¶≠', '‡¶Æ‡ßÄ‡¶®', '‡¶Æ‡ßá‡¶∑', '‡¶¨‡ßÉ‡¶∑', '‡¶Æ‡¶ø‡¶•‡ßÅ‡¶®', '‡¶ï‡¶∞‡ßç‡¶ï‡¶ü', '‡¶∏‡¶ø‡¶Ç‡¶π', '‡¶ï‡¶®‡ßç‡¶Ø‡¶æ', '‡¶§‡ßÅ‡¶≤‡¶æ', '‡¶¨‡ßÉ‡¶∂‡ßç‡¶ö‡¶ø‡¶ï', '‡¶ß‡¶®‡ßÅ'],
      descriptions: [
        {
          name: '‡¶Æ‡¶ï‡¶∞',
          personality: '‡¶Æ‡¶ï‡¶∞ ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶ï‡¶æ‡¶ô‡ßç‡¶ï‡ßç‡¶∑‡ßÄ, ‡¶∂‡ßÉ‡¶ô‡ßç‡¶ñ‡¶≤‡¶æ‡¶¨‡¶¶‡ßç‡¶ß ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡¶¨‡¶æ‡¶¶‡ßÄ‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶¶‡ßÉ‡¶¢‡¶º ‡¶∏‡¶Ç‡¶ï‡¶≤‡ßç‡¶™ ‡¶∏‡¶π ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï ‡¶®‡ßá‡¶§‡ßÉ‡¶§‡ßç‡¶¨‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶®‡¶ø‡¶ß‡¶ø‡¶§‡ßç‡¶¨ ‡¶ï‡¶∞‡ßá‡•§',
          traits: '‡¶™‡¶∞‡¶ø‡¶∂‡ßç‡¶∞‡¶Æ‡ßÄ, ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨‡¶∂‡ßÄ‡¶≤, ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø‡¶∂‡ßÄ‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï‡•§',
          element: '‡¶Æ‡ßÉ‡¶§‡ßç‡¶§‡¶ø‡¶ï‡¶æ',
          symbol: 'üêê'
        },
        {
          name: '‡¶ï‡ßÅ‡¶Æ‡ßç‡¶≠',
          personality: '‡¶ï‡ßÅ‡¶Æ‡ßç‡¶≠ ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶®, ‡¶â‡¶¶‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶®‡¶¨‡¶§‡¶æ‡¶¨‡¶æ‡¶¶‡ßÄ‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶™‡ßç‡¶∞‡¶ö‡¶≤‡¶ø‡¶§ ‡¶ß‡¶æ‡¶∞‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶®‡¶¨‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§',
          traits: '‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï, ‡¶™‡ßç‡¶∞‡¶ó‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤, ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶®‡¶¨‡¶§‡¶æ‡¶¨‡¶æ‡¶¶‡ßÄ‡•§',
          element: '‡¶¨‡¶æ‡¶Ø‡¶º‡ßÅ',
          symbol: '‚ôí'
        },
        {
          name: '‡¶Æ‡ßÄ‡¶®',
          personality: '‡¶Æ‡ßÄ‡¶® ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶∏‡¶π‡¶æ‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤, ‡¶∏‡ßç‡¶¨‡¶ú‡ßç‡¶û‡¶æ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßà‡¶≤‡ßç‡¶™‡¶ø‡¶ï‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø‡¶∞ ‡¶Ü‡¶¨‡ßá‡¶ó ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÉ‡¶ú‡¶®‡¶∂‡ßÄ‡¶≤‡¶§‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ó‡¶≠‡ßÄ‡¶∞ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§',
          traits: '‡¶∏‡¶π‡¶æ‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤, ‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ‡¶™‡ßç‡¶∞‡¶¨‡¶£, ‡¶®‡¶Æ‡ßç‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶ß‡ßç‡¶Ø‡¶æ‡¶§‡ßç‡¶Æ‡¶ø‡¶ï‡•§',
          element: '‡¶ú‡¶≤',
          symbol: 'üêü'
        },
        {
          name: '‡¶Æ‡ßá‡¶∑',
          personality: '‡¶Æ‡ßá‡¶∑ ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶∏‡¶æ‡¶π‡¶∏‡ßÄ, ‡¶â‡¶¶‡ßç‡¶Ø‡¶Æ‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶ó‡ßç‡¶∞‡¶ó‡¶æ‡¶Æ‡ßÄ‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶™‡ßç‡¶∞‡¶ö‡ßÅ‡¶∞ ‡¶â‡ßé‡¶∏‡¶æ‡¶π ‡¶∏‡¶π ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï ‡¶®‡ßá‡¶§‡ßÉ‡¶§‡ßç‡¶¨‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶®‡¶ø‡¶ß‡¶ø‡¶§‡ßç‡¶¨ ‡¶ï‡¶∞‡ßá‡•§',
          traits: '‡¶∏‡¶æ‡¶π‡¶∏‡ßÄ, ‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßÄ, ‡¶Ü‡¶¨‡ßá‡¶ó‡¶™‡ßç‡¶∞‡¶¨‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶®‡•§',
          element: '‡¶Ö‡¶ó‡ßç‡¶®‡¶ø',
          symbol: '‚ôà'
        },
        {
          name: '‡¶¨‡ßÉ‡¶∑',
          personality: '‡¶¨‡ßÉ‡¶∑ ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø, ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø‡¶∂‡ßÄ‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡¶¨‡¶æ‡¶¶‡ßÄ‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤‡¶§‡¶æ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶¶‡ßá‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶Ü‡¶®‡¶®‡ßç‡¶¶ ‡¶â‡¶™‡¶≠‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡•§',
          traits: '‡¶¶‡ßÉ‡¶¢‡¶º‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ú‡ßç‡¶û, ‡¶Ö‡¶®‡ßÅ‡¶ó‡¶§, ‡¶∏‡¶Ç‡¶¨‡ßá‡¶¶‡¶®‡¶∂‡ßÄ‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶Æ‡ßÇ‡¶≤‡¶ï‡•§',
          element: '‡¶Æ‡ßÉ‡¶§‡ßç‡¶§‡¶ø‡¶ï‡¶æ',
          symbol: 'üêÇ'
        },
        {
          name: '‡¶Æ‡¶ø‡¶•‡ßÅ‡¶®',
          personality: '‡¶Æ‡¶ø‡¶•‡ßÅ‡¶® ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶ï‡ßå‡¶§‡ßÇ‡¶π‡¶≤‡ßÄ, ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ú‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡¶Æ‡ßÇ‡¶≤‡¶ï‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶∂‡ßá‡¶ñ‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡ßá‡•§',
          traits: '‡¶¨‡¶π‡ßÅ‡¶Æ‡ßÅ‡¶ñ‡ßÄ, ‡¶Ö‡¶≠‡¶ø‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£, ‡¶§‡ßÄ‡¶ï‡ßç‡¶∑‡ßç‡¶£‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶ú‡¶ø‡¶ï‡•§',
          element: '‡¶¨‡¶æ‡¶Ø‡¶º‡ßÅ',
          symbol: '‚ôä'
        },
        {
          name: '‡¶ï‡¶∞‡ßç‡¶ï‡¶ü',
          personality: '‡¶ï‡¶∞‡ßç‡¶ï‡¶ü ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶Ø‡¶§‡ßç‡¶®‡¶∂‡ßÄ‡¶≤, ‡¶∏‡ßç‡¶¨‡¶ú‡ßç‡¶û‡¶æ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø‡¶∞ ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶Ü‡¶¨‡ßá‡¶ó‡¶ø‡¶ï ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßç‡¶§‡¶æ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ó‡¶≠‡ßÄ‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡¶§‡ßç‡¶® ‡¶®‡ßá‡¶Ø‡¶º‡•§',
          traits: '‡¶Ö‡¶®‡ßÅ‡¶ó‡¶§, ‡¶∏‡¶π‡¶æ‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤, ‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ‡¶™‡ßç‡¶∞‡¶¨‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï‡•§',
          element: '‡¶ú‡¶≤',
          symbol: '‚ôã'
        },
        {
          name: '‡¶∏‡¶ø‡¶Ç‡¶π',
          personality: '‡¶∏‡¶ø‡¶Ç‡¶π ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßÄ, ‡¶∏‡ßÉ‡¶ú‡¶®‡¶∂‡ßÄ‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶â‡¶¶‡¶æ‡¶∞‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø‡¶∞ ‡¶®‡¶æ‡¶ü‡¶ï‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶®‡ßá‡¶§‡ßÉ‡¶§‡ßç‡¶¨‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§',
          traits: '‡¶®‡¶æ‡¶ü‡¶ï‡ßÄ‡¶Ø‡¶º, ‡¶∏‡ßÉ‡¶ú‡¶®‡¶∂‡ßÄ‡¶≤, ‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶â‡¶¶‡¶æ‡¶∞‡•§',
          element: '‡¶Ö‡¶ó‡ßç‡¶®‡¶ø',
          symbol: '‚ôå'
        },
        {
          name: '‡¶ï‡¶®‡ßç‡¶Ø‡¶æ',
          personality: '‡¶ï‡¶®‡ßç‡¶Ø‡¶æ ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï, ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡¶¨‡¶æ‡¶¶‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø‡¶∞ ‡¶®‡¶ø‡¶ñ‡ßÅ‡¶Å‡¶§‡¶§‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡ßÄ‡¶ï‡ßç‡¶∑‡ßç‡¶£ ‡¶¶‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§',
          traits: '‡¶Ö‡¶®‡ßÅ‡¶ó‡¶§, ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï, ‡¶¶‡¶Ø‡¶º‡¶æ‡¶≤‡ßÅ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶∂‡ßç‡¶∞‡¶Æ‡ßÄ‡•§',
          element: '‡¶Æ‡ßÉ‡¶§‡ßç‡¶§‡¶ø‡¶ï‡¶æ',
          symbol: '‚ôç'
        },
        {
          name: '‡¶§‡ßÅ‡¶≤‡¶æ',
          personality: '‡¶§‡ßÅ‡¶≤‡¶æ ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶ï‡ßÇ‡¶ü‡¶®‡ßà‡¶§‡¶ø‡¶ï, ‡¶®‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶™‡¶∞‡¶æ‡¶Ø‡¶º‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶ú‡¶ø‡¶ï‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶≠‡¶æ‡¶∞‡¶∏‡¶æ‡¶Æ‡ßç‡¶Ø ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá‡•§',
          traits: '‡¶∏‡¶π‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï, ‡¶ï‡ßÇ‡¶ü‡¶®‡ßà‡¶§‡¶ø‡¶ï, ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶®‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶™‡¶∞‡¶æ‡¶Ø‡¶º‡¶£‡•§',
          element: '‡¶¨‡¶æ‡¶Ø‡¶º‡ßÅ',
          symbol: '‚ôé'
        },
        {
          name: '‡¶¨‡ßÉ‡¶∂‡ßç‡¶ö‡¶ø‡¶ï',
          personality: '‡¶¨‡ßÉ‡¶∂‡ßç‡¶ö‡¶ø‡¶ï ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶Ü‡¶¨‡ßá‡¶ó‡¶™‡ßç‡¶∞‡¶¨‡¶£, ‡¶∏‡¶Æ‡ßç‡¶™‡¶¶‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶π‡¶∏‡ßÄ‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø‡¶∞ ‡¶§‡ßÄ‡¶¨‡ßç‡¶∞ ‡¶Ü‡¶¨‡ßá‡¶ó ‡¶è‡¶¨‡¶Ç ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶∏‡ßç‡¶¨‡¶ú‡ßç‡¶û‡¶æ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§',
          traits: '‡¶∏‡¶Æ‡ßç‡¶™‡¶¶‡¶∂‡¶æ‡¶≤‡ßÄ, ‡¶∏‡¶æ‡¶π‡¶∏‡ßÄ, ‡¶Ü‡¶¨‡ßá‡¶ó‡¶™‡ßç‡¶∞‡¶¨‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶ú‡ßá‡¶¶‡ßÄ‡•§',
          element: '‡¶ú‡¶≤',
          symbol: '‚ôè'
        },
        {
          name: '‡¶ß‡¶®‡ßÅ',
          personality: '‡¶ß‡¶®‡ßÅ ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶¶‡ßÅ‡¶É‡¶∏‡¶æ‡¶π‡¶∏‡¶ø‡¶ï, ‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¶‡¶æ‡¶∞‡ßç‡¶∂‡¶®‡¶ø‡¶ï‡•§ ‡¶è‡¶á ‡¶∞‡¶æ‡¶∂‡¶ø ‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶®‡¶§‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶§‡ßÅ‡¶® ‡¶¶‡¶ø‡¶ó‡¶®‡ßç‡¶§ ‡¶Ö‡¶®‡ßç‡¶¨‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡ßá‡•§',
          traits: '‡¶â‡¶¶‡¶æ‡¶∞, ‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂‡¶¨‡¶æ‡¶¶‡ßÄ, ‡¶Æ‡¶π‡¶æ‡¶® ‡¶∞‡¶∏‡¶¨‡ßã‡¶ß ‡¶è‡¶¨‡¶Ç ‡¶¶‡¶æ‡¶∞‡ßç‡¶∂‡¶®‡¶ø‡¶ï‡•§',
          element: '‡¶Ö‡¶ó‡ßç‡¶®‡¶ø',
          symbol: '‚ôê'
        }
      ]
    }
  };
  
  const zodiacDates = [20, 19, 20, 20, 21, 21, 22, 23, 23, 23, 22, 22];
  const month = birthDate.getMonth();
  const day = birthDate.getDate();
  const zodiacIndex = day <= zodiacDates[month] ? month : (month + 1) % 12;
  const zodiacSign = zodiacData[locale as keyof typeof zodiacData].signs[zodiacIndex];
  const zodiacInfo = zodiacData[locale as keyof typeof zodiacData].descriptions[zodiacIndex];
  const zodiacInfoEn = zodiacData.en.descriptions[zodiacIndex];
  const zodiacInfoBn = zodiacData.bn.descriptions[zodiacIndex];

  return {
    sign: zodiacSign,
    info: zodiacInfo,
    infoEn: zodiacInfoEn,
    infoBn: zodiacInfoBn,
    index: zodiacIndex
  };
}
